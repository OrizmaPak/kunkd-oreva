"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Highlighter = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const markStyles = _ref => {
  let {
    color,
    backgroundColor
  } = _ref;
  return {
    color,
    backgroundColor
  };
};
const Highlighter = _ref2 => {
  let {
    text,
    mark,
    color,
    backgroundColor
  } = _ref2;
  const markStyle = (0, _react.useMemo)(() => markStyles({
    color,
    backgroundColor
  }), [color, backgroundColor]);
  if (text && mark) {
    const textStr = text.toString();
    const escapedMark = mark.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
    const regex = new RegExp(`(${escapedMark})`, 'gi');
    const parts = textStr.split(regex);
    if (parts.length > 1) {
      return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        children: parts.map((part, idx) => {
          const key = `${part}-${idx}`;
          if (!part) {
            // Happens when the entire text matches the mark
            return null;
          }
          if (regex.test(part)) {
            return /*#__PURE__*/(0, _jsxRuntime.jsx)("mark", {
              style: markStyle,
              children: part
            }, key);
          }
          return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
            children: part
          }, key);
        })
      });
    }
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: text
  });
};
exports.Highlighter = Highlighter;